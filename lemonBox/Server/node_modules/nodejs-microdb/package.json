{
  "name": "nodejs-microdb",
  "version": "0.0.2",
  "description": "A Micro-sized key/document database - very simple. Auto-flush to disk and in-memory options",
  "main": "microdb.js",
  "scripts": {
    "test": "node ./tests/test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jtsage/nodejs-microdb.git"
  },
  "keywords": [
    "database",
    "storage",
    "tiny"
  ],
  "author": {
    "name": "J.T.Sage"
  },
  "license": "BSD",
  "readme": "MicroDB\n==========\n\nPurpose\n-------\nnodejs-microdb is a *tiny* in-process database.  It has very few methods, but\ndoes feature auto-flushing to disk (for file based stores).  It can also be\nused in a memory-only mode.  \n\nTOC\n---\n* [Usage](#usage)\n* [Options](#options)\n* [API](#api)\n* [Status](#status)\n* [Contributors](#contrib)\n* [Compatibility](#compat)\n* [Licence](#lic)\n\n<a name=\"usage\"></a>Usage\n-------------------------\n\n    var microdb = require('nodejs-microdb');\n    var myDB = new microdb({'file':'somefile.db'});\n    \n<a name=\"options\"></a>Options\n-----------------------------\n\nWhen making a new database, you have some choices:\n\n    var myDB = new microdb({\n      'file': '',     // The filename to save to, or empty for memory only\n    \n      'savetime': 10, // In minutes, how often to flush to disk (approx)\n                      // Set this to 0 to diable auto-save.\n    \n      'datatype': 0,  // Which data-type:\n                      //  0 = Array-based, no keys. (useful for storing lists to disk)\n                      //  1 = Object-based, with keys. (what most key/doc's do)\n                   \n      'maxrec': 10,   // Maximum number of records (for datatype === 0 ONLY)\n    \n      'flushonexit': true,   // Auto-flush when program quits.\n                             // I recommend you leave this on.\n\n      'defalutClean': false, // Auto-remove incomplete records on sort opertaions.\n                             // This is useful if your document type isn't consistent.\n                             // It can also be turned on per-query.\n    });\n\n<a name=\"api\"></a>API\n---------------------\n\n### Datatype === 1 Methods:\n\n####MicroData.add(data, \\[ident\\]); \nAdd an item to the store.  If \"ident\" is not supplied, it will be created.  \nReturn value is the *\"ident\"*.\n\n####MicroData.del(ident);\nRemove a named \"ident\" from the store.\n\n####MicroData.find(key, value);\nFind a record \"ident\" by a named key/value pair.  Returns first match, search \norder is arbitrary.\n\n####MicroData.findAll(key, value);\nReturn an array of record \"ident\"'s where key === value.  Order is arbitrary.\n\n####MicroData.findAllWithKey(key);\nReturn an array of record \"ident\"'s the contain 'key'.  Order is arbitrary.\n\n####MicroData.sortByKey(key, [direction], [alpha], [cleanBad]);\nReturns an array of values and \"ident\"'s, sorted in \"direction\" (asc/desc).\nSet \"alpha\" to true for alphanumeric sort.  If 'cleanBad' is\ntrue, results with one or more 'undefined' values for the specified keys will\nnot be returned. NOTE: This is just a convience method to the below...\n\n####MicroData.sortByKeys(sorts, [cleanBad]);\nReturns an array of values and \"idents\"'s sorted by \"sorts\" array - where sorts\nis an array of \\[key, direction, alpha\\] arrays. (see above).  If 'cleanBad' is\ntrue, results with one or more 'undefined' values for the specified keys will\nnot be returned.\n\n\n### Datatype === 0 Methods:\n\n#### MicroData.add(data);\nAdd an item to the list.\n\n#### MicroData.del(num);\nRemove item number 'num' from list.  0-based.\n\n### Shared Methods:\n\n####MicroData.load();\nLoad file from disk.  Usually called automatically, but if you are before \noptions.savetime, it might work as an undo.\n\n####MicroData.save();\nSave file to disk.  This is an anonomized asych method (no callback, it'll do it\neventually.  Used internally, I don't recommend it)\n\n####MicroData.flush();\nSave file to disk *now*.  Synch method.  If you think you need to flush the db\nyourself, chances are this is the method you want.\n\n## <a name=\"status\"></a>Current status\nThis module is in a development stage. It is broken horribly in places.  There\nare quite a few features missing.  And it has zero room for error - this will\nalways be intended for internal persistent storage, not a real replacement for \nwhat you should use a real database for.\n\n\n## <a name=\"contrib\"></a>Contributors\n* [J.T. Sage](https://github.com/jtsgae/)\n\n## <a name=\"compat\"></a>Compatibility\nThis module was only tested using node >= 0.8.8.  There is no reason it shouldn't\nrun under earlier versions though.\n\n## <a name=\"lic\"></a>Licence\nnode-ansibuffer is licensed under the MIT license. Or the BSD license.  Or no\nlicense if that's more convient for you.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jtsage/nodejs-microdb/issues"
  },
  "homepage": "https://github.com/jtsage/nodejs-microdb",
  "_id": "nodejs-microdb@0.0.2",
  "dist": {
    "shasum": "a66336a1ba7efde018ee2ef82fc39f20d055d41c"
  },
  "_from": "nodejs-microdb@",
  "_resolved": "http://registry.npmjs.org/nodejs-microdb/-/nodejs-microdb-0.0.2.tgz"
}
